# Import required libraries
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report

# Sample dataset (bin fill level, temperature, gas level, hours since last collection)
data = {
    'fill_level': [45, 80, 95, 30, 85, 65],
    'temperature': [30, 35, 40, 28, 38, 33],
    'gas_level': [0.02, 0.05, 0.08, 0.01, 0.07, 0.03],
    'hours_since_last_collection': [10, 20, 25, 6, 18, 12],
    'overflow': [0, 1, 1, 0, 1, 0]  # 1 = Overflow predicted
}

# Convert to DataFrame
df = pd.DataFrame(data)

# Features and labels
X = df[['fill_level', 'temperature', 'gas_level', 'hours_since_last_collection']]
y = df['overflow']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Random Forest Classifier
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Evaluate the model
y_pred = model.predict(X_test)
print("Classification Report:\n", classification_report(y_test, y_pred))

# Predicting for a new bin status
new_bin = [[90, 36, 0.06, 22]]  # e.g., 90% full, 36Â°C, moderate gas, 22 hrs since last collection
prediction = model.predict(new_bin)

if prediction[0] == 1:
    print("Prediction: Bin will overflow soon. Schedule immediate collection.")
else:
    print("Prediction: Bin does not require urgent collection.")
